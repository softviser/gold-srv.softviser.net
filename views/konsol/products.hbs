<!-- Page Header -->
<div class="mb-6 flex items-center justify-between">
    <div>
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Ürün Yönetimi</h2>
        <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">Formül tabanlı ürünlerinizi yönetin</p>
    </div>
    <button onclick="openCreateProductModal()" class="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors">
        <i class="fas fa-plus mr-2"></i>Yeni Ürün
    </button>
</div>

<!-- Filter Bar -->
<div class="bg-white dark:bg-gray-800 rounded-lg shadow mb-4 p-4">
    <div class="flex flex-wrap gap-4">
        <select id="sectionFilter" onchange="filterProducts()" class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
            <option value="">Tüm Sectionlar</option>
            {{#each sections}}
            <option value="{{this._id}}" {{#if (eq this._id ../selectedSection)}}selected{{/if}}>{{this.name}}</option>
            {{/each}}
        </select>
        
        <input type="text" id="searchFilter" placeholder="Ürün ara..." onkeyup="filterProducts()"
               class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
    </div>
</div>

<!-- Products by Sections -->
<div id="productsContainer" class="space-y-6">
    <!-- Loading State -->
    <div class="text-center py-12">
        <i class="fas fa-spinner fa-spin text-4xl text-gray-400 mb-4"></i>
        <p class="text-gray-600 dark:text-gray-400">Ürünler yükleniyor...</p>
    </div>
</div>

<!-- Product Modal -->
<div id="productModal" class="fixed inset-0 bg-gray-600 bg-opacity-75 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                    <span id="productModalTitle">Yeni Ürün</span>
                </h3>
                
                <form id="productForm" class="space-y-4">
                    <input type="hidden" id="productId" name="productId">
                    
                    <!-- Basic Info -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                Ürün Adı *
                            </label>
                            <input type="text" id="productName" name="name" required
                                   class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                Ürün Kodu
                            </label>
                            <input type="text" id="productCode" name="productCode"
                                   class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                        </div>
                    </div>
                    
                    <!-- Section Selection -->
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div class="md:col-span-2">
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                Section
                            </label>
                            <select id="productSectionId" name="sectionId"
                                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                <option value="">Section Seçin</option>
                                {{#each sections}}
                                <option value="{{this._id}}">{{this.name}}</option>
                                {{/each}}
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                Sıra
                            </label>
                            <input type="number" id="displayOrder" name="displayOrder" min="1" step="1" placeholder="Otomatik"
                                   class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Boş bırakılırsa otomatik</p>
                        </div>
                    </div>
                    
                    <!-- Formulas -->
                    <div class="border-t dark:border-gray-700 pt-4">
                        <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Formüller</h4>
                        
                        <div class="space-y-4">
                            <div>
                                <label class="block text-sm text-gray-600 dark:text-gray-400 mb-1">
                                    Alış Formülü *
                                </label>
                                <input type="text" id="buyingFormula" name="buyingFormula" required
                                       placeholder="Örn: HAS_alis * 0.916"
                                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white font-mono">
                            </div>
                            
                            <div>
                                <label class="block text-sm text-gray-600 dark:text-gray-400 mb-1">
                                    Satış Formülü *
                                </label>
                                <input type="text" id="sellingFormula" name="sellingFormula" required
                                       placeholder="Örn: HAS_satis * 0.916"
                                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white font-mono">
                            </div>
                        </div>
                    </div>
                    
                    <!-- Rounding Config -->
                    <div class="border-t dark:border-gray-700 pt-4">
                        <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Yuvarlama Ayarları</h4>
                        
                        <!-- Alış Yuvarlama -->
                        <div class="mb-4 p-3 border border-gray-200 dark:border-gray-600 rounded-lg">
                            <h5 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">Alış Fiyatı Yuvarlama</h5>
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
                                <div>
                                    <label class="block text-xs text-gray-500 dark:text-gray-400 mb-1">Metod</label>
                                    <select id="buyingRoundingMethod" name="buyingRoundingMethod"
                                            class="w-full px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                        <option value="none">Yok</option>
                                        <option value="nearest" selected>En Yakın</option>
                                        <option value="up">Yukarı</option>
                                        <option value="down">Aşağı</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-xs text-gray-500 dark:text-gray-400 mb-1">Hassasiyet</label>
                                    <input type="number" id="buyingRoundingPrecision" name="buyingRoundingPrecision" value="5" min="0.01" step="0.01"
                                           class="w-full px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                </div>
                                <div>
                                    <label class="block text-xs text-gray-500 dark:text-gray-400 mb-1">Ondalık</label>
                                    <input type="number" id="buyingDecimalPlaces" name="buyingDecimalPlaces" value="2" min="0" max="8"
                                           class="w-full px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                </div>
                            </div>
                        </div>
                        
                        <!-- Satış Yuvarlama -->
                        <div class="mb-4 p-3 border border-gray-200 dark:border-gray-600 rounded-lg">
                            <h5 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">Satış Fiyatı Yuvarlama</h5>
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
                                <div>
                                    <label class="block text-xs text-gray-500 dark:text-gray-400 mb-1">Metod</label>
                                    <select id="sellingRoundingMethod" name="sellingRoundingMethod"
                                            class="w-full px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                        <option value="none">Yok</option>
                                        <option value="nearest" selected>En Yakın</option>
                                        <option value="up">Yukarı</option>
                                        <option value="down">Aşağı</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-xs text-gray-500 dark:text-gray-400 mb-1">Hassasiyet</label>
                                    <input type="number" id="sellingRoundingPrecision" name="sellingRoundingPrecision" value="5" min="0.01" step="0.01"
                                           class="w-full px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                </div>
                                <div>
                                    <label class="block text-xs text-gray-500 dark:text-gray-400 mb-1">Ondalık</label>
                                    <input type="number" id="sellingDecimalPlaces" name="sellingDecimalPlaces" value="2" min="0" max="8"
                                           class="w-full px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Status -->
                    <div class="flex items-center">
                        <input type="checkbox" id="productIsActive" name="isActive" checked
                               class="rounded border-gray-300 dark:border-gray-600 text-primary-600 focus:ring-primary-500">
                        <label for="productIsActive" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Aktif</label>
                    </div>
                    
                    <!-- Actions -->
                    <div class="flex justify-end space-x-2 pt-4 border-t dark:border-gray-700">
                        <button type="button" onclick="closeProductModal()"
                                class="px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600">
                            İptal
                        </button>
                        <button type="submit"
                                class="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700">
                            <i class="fas fa-save mr-2"></i>Kaydet
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
// Drag and Drop functionality
let draggedRow = null;
let draggedSectionId = null;
let productsData = [];
let selectedSourceId = null;

document.addEventListener('DOMContentLoaded', function() {
    // Get selected source from settings
    getSelectedSource().then(() => {
        loadProductsWithPrices();
    });
});

// Get selected source from user settings
async function getSelectedSource() {
    try {
        const response = await fetch('/konsol/settings');
        const text = await response.text();
        // Extract selectedSourceId from the rendered page
        const parser = new DOMParser();
        const doc = parser.parseFromString(text, 'text/html');
        const sourceSelects = doc.querySelectorAll('select option[selected]');
        
        for (let option of sourceSelects) {
            const select = option.closest('select');
            if (select && select.getAttribute('onchange')?.includes('source')) {
                selectedSourceId = option.value;
                break;
            }
        }
    } catch (error) {
        console.error('Error getting selected source:', error);
    }
}

function filterProducts() {
    loadProductsWithPrices();
}

function openCreateProductModal() {
    document.getElementById('productModal').classList.remove('hidden');
    document.getElementById('productModalTitle').textContent = 'Yeni Ürün';
    document.getElementById('productForm').reset();
    document.getElementById('productId').value = '';
}

function closeProductModal() {
    document.getElementById('productModal').classList.add('hidden');
}

async function editProduct(id) {
    try {
        // Fetch product data
        const response = await fetch(`/konsol/api/products/${id}`);
        const result = await response.json();
        
        if (result.success) {
            const product = result.data;
            
            // Populate modal fields
            document.getElementById('productId').value = product._id;
            document.getElementById('productName').value = product.name || '';
            document.getElementById('productCode').value = product.productCode || '';
            document.getElementById('productSectionId').value = product.sectionId || '';
            document.getElementById('displayOrder').value = product.displayOrder || '';
            document.getElementById('buyingFormula').value = product.buyingFormula || '';
            document.getElementById('sellingFormula').value = product.sellingFormula || '';
            
            // Buying rounding config
            const buyingConfig = product.buyingRoundingConfig || product.roundingConfig || {};
            document.getElementById('buyingRoundingMethod').value = buyingConfig.method || 'nearest';
            document.getElementById('buyingRoundingPrecision').value = buyingConfig.precision || 5;
            document.getElementById('buyingDecimalPlaces').value = buyingConfig.decimalPlaces || 2;
            
            // Selling rounding config
            const sellingConfig = product.sellingRoundingConfig || product.roundingConfig || {};
            document.getElementById('sellingRoundingMethod').value = sellingConfig.method || 'nearest';
            document.getElementById('sellingRoundingPrecision').value = sellingConfig.precision || 5;
            document.getElementById('sellingDecimalPlaces').value = sellingConfig.decimalPlaces || 2;
            
            document.getElementById('productIsActive').checked = product.isActive !== false;
            
            // Update modal title
            document.getElementById('productModalTitle').textContent = 'Ürün Düzenle';
            
            // Show modal
            document.getElementById('productModal').classList.remove('hidden');
        } else {
            alert('Ürün bilgileri yüklenemedi: ' + result.error);
        }
    } catch (error) {
        console.error('Edit product error:', error);
        alert('Ürün düzenleme sırasında hata oluştu');
    }
}

function testProduct(id) {
    window.location.href = '/konsol/calculator?productId=' + id;
}

async function deleteProduct(id) {
    if (confirm('Bu ürünü silmek istediğinize emin misiniz?')) {
        try {
            const response = await fetch(`/konsol/api/products/${id}`, {
                method: 'DELETE'
            });
            const result = await response.json();
            
            if (result.success) {
                // Reload products list
                loadProductsWithPrices();
            } else {
                alert('Ürün silinemedi: ' + result.error);
            }
        } catch (error) {
            console.error('Delete product error:', error);
            alert('Ürün silme sırasında hata oluştu');
        }
    }
}

// Close modal on backdrop click
document.getElementById('productModal').addEventListener('click', (e) => {
    if (e.target.id === 'productModal') {
        closeProductModal();
    }
});

// Form submit
document.getElementById('productForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData);
    data.isActive = formData.has('isActive');
    
    // Prepare rounding configs
    data.buyingRoundingConfig = {
        method: document.getElementById('buyingRoundingMethod').value,
        precision: parseFloat(document.getElementById('buyingRoundingPrecision').value) || 5,
        decimalPlaces: parseInt(document.getElementById('buyingDecimalPlaces').value) || 2
    };
    
    data.sellingRoundingConfig = {
        method: document.getElementById('sellingRoundingMethod').value,
        precision: parseFloat(document.getElementById('sellingRoundingPrecision').value) || 5,
        decimalPlaces: parseInt(document.getElementById('sellingDecimalPlaces').value) || 2
    };
    
    try {
        const response = await fetch('/konsol/api/products', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
            closeProductModal();
            loadProductsWithPrices(); // Refresh products list
        } else {
            alert('Ürün kaydedilemedi: ' + result.error);
        }
    } catch (error) {
        console.error('Save product error:', error);
        alert('Ürün kaydetme sırasında hata oluştu');
    }
});

async function loadProductsWithPrices() {
    try {
        // Get section filter
        const sectionFilter = document.getElementById('sectionFilter').value;
        let productsUrl = '/konsol/api/products';
        if (sectionFilter) {
            productsUrl += `?sectionId=${sectionFilter}`;
        }
        
        // Load products and prices concurrently
        const [productsResponse, pricesResponse] = await Promise.all([
            fetch(productsUrl),
            fetch(`/konsol/api/prices${selectedSourceId ? `?sourceId=${selectedSourceId}` : ''}`)
        ]);
        
        const productsResult = await productsResponse.json();
        const pricesResult = await pricesResponse.json();
        
        if (productsResult.success) {
            productsData = productsResult.data || [];
            
            // Merge price data with products
            if (pricesResult.success && pricesResult.data?.products) {
                const pricesMap = new Map();
                pricesResult.data.products.forEach(priceProduct => {
                    pricesMap.set(priceProduct._id, priceProduct);
                });
                
                productsData = productsData.map(product => {
                    const priceData = pricesMap.get(product._id);
                    return {
                        ...product,
                        buyingPrice: priceData?.buyingPrice,
                        sellingPrice: priceData?.sellingPrice,
                        priceError: priceData?.error
                    };
                });
            }
            
            displayProducts(productsData);
            initializeDragAndDrop();
        } else {
            document.getElementById('productsContainer').innerHTML = `
                <div class="bg-red-50 dark:bg-red-900/20 rounded-lg p-4">
                    <div class="flex items-center text-red-800 dark:text-red-300">
                        <i class="fas fa-exclamation-triangle mr-2"></i>
                        <span>Ürünler yüklenirken hata oluştu</span>
                    </div>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error loading products:', error);
        document.getElementById('productsContainer').innerHTML = `
            <div class="bg-red-50 dark:bg-red-900/20 rounded-lg p-4">
                <div class="flex items-center text-red-800 dark:text-red-300">
                    <i class="fas fa-exclamation-triangle mr-2"></i>
                    <span>Ürünler yüklenirken hata oluştu</span>
                </div>
            </div>
        `;
    }
}

function displayProducts(products) {
    if (!products || products.length === 0) {
        document.getElementById('productsContainer').innerHTML = `
            <div class="bg-gray-100 dark:bg-gray-700 rounded-lg p-8 text-center">
                <i class="fas fa-box-open text-4xl text-gray-400 mb-4"></i>
                <p class="text-gray-600 dark:text-gray-400">Gösterilecek ürün bulunamadı</p>
                <button onclick="openCreateProductModal()" class="mt-4 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700">
                    <i class="fas fa-plus mr-2"></i>İlk Ürünü Ekle
                </button>
            </div>
        `;
        return;
    }

    // Sort products by section displayOrder, then product displayOrder
    products.sort((a, b) => {
        const aSectionOrder = a.sectionDisplayOrder || 999;
        const bSectionOrder = b.sectionDisplayOrder || 999;
        
        if (aSectionOrder !== bSectionOrder) {
            return aSectionOrder - bSectionOrder;
        }
        
        const aProductOrder = a.displayOrder || 999;
        const bProductOrder = b.displayOrder || 999;
        
        if (aProductOrder !== bProductOrder) {
            return aProductOrder - bProductOrder;
        }
        
        return a.name.localeCompare(b.name, 'tr');
    });

    // Group by section
    const grouped = {};
    products.forEach(product => {
        const sectionName = product.sectionName || 'Kategorisiz';
        if (!grouped[sectionName]) {
            grouped[sectionName] = {
                section: product.sectionInfo?.[0],
                products: []
            };
        }
        grouped[sectionName].products.push(product);
    });

    // Sort sections by displayOrder
    const sortedSections = Object.entries(grouped).sort((a, b) => {
        const aSectionOrder = a[1].section?.displayOrder || 999;
        const bSectionOrder = b[1].section?.displayOrder || 999;
        
        if (aSectionOrder !== bSectionOrder) {
            return aSectionOrder - bSectionOrder;
        }
        
        return a[0].localeCompare(b[0], 'tr');
    });

    // Generate HTML as table format
    let html = '';
    
    for (const [sectionName, data] of sortedSections) {
        const sectionConfig = data.section?.displayConfig || {};
        
        html += `
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
                <div class="p-4 border-b dark:border-gray-700" style="background-color: ${sectionConfig.backgroundColor || 'transparent'}20">
                    <h3 class="font-semibold text-gray-900 dark:text-white flex items-center">
                        ${sectionConfig.icon ? `<i class="fas fa-${sectionConfig.icon} mr-2" style="color: ${sectionConfig.color || '#3B82F6'}"></i>` : ''}
                        ${sectionName}
                        <span class="ml-2 text-sm text-gray-500 dark:text-gray-400">(${data.products.length} ürün)</span>
                    </h3>
                </div>
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead class="bg-gray-50 dark:bg-gray-700">
                            <tr>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Sıra</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Ürün</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Formüller</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Fiyatlar</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Durum</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">İşlemler</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700 sortable-section" data-section="${data.section?._id || ''}">
        `;
        
        data.products.forEach(product => {
            const buyPrice = product.buyingPrice;
            const sellPrice = product.sellingPrice;
            const hasError = product.priceError;
            
            html += `
                        <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 sortable-row" 
                            data-section="${product.sectionId || ''}" 
                            data-product-id="${product._id}" 
                            draggable="true">
                            <td class="px-3 py-3 whitespace-nowrap">
                                <div class="flex items-center text-gray-400 hover:text-gray-600 cursor-grab drag-handle">
                                    <i class="fas fa-grip-vertical text-sm mr-2"></i>
                                    <span class="text-sm font-medium text-gray-900 dark:text-white">${product.displayOrder || '-'}</span>
                                </div>
                            </td>
                            <td class="px-3 py-3">
                                <div>
                                    <div class="text-sm font-medium text-gray-900 dark:text-white">${product.name}</div>
                                    ${product.productCode ? `<div class="text-xs text-gray-500 dark:text-gray-400">${product.productCode}</div>` : ''}
                                </div>
                            </td>
                            <td class="px-3 py-3">
                                <div class="text-xs space-y-1">
                                    <div class="flex items-center">
                                        <span class="text-green-600 dark:text-green-400 font-mono w-4">A:</span>
                                        <span class="text-gray-600 dark:text-gray-400 ml-1 font-mono">${product.buyingFormula.length > 25 ? product.buyingFormula.substring(0, 25) + '...' : product.buyingFormula}</span>
                                    </div>
                                    <div class="flex items-center">
                                        <span class="text-red-600 dark:text-red-400 font-mono w-4">S:</span>
                                        <span class="text-gray-600 dark:text-gray-400 ml-1 font-mono">${product.sellingFormula.length > 25 ? product.sellingFormula.substring(0, 25) + '...' : product.sellingFormula}</span>
                                    </div>
                                </div>
                            </td>
                            <td class="px-3 py-3">
                                ${hasError ? 
                                    `<div class="text-xs text-red-600 dark:text-red-400">
                                        <i class="fas fa-exclamation-triangle mr-1"></i>Hata
                                    </div>` :
                                    `<div class="text-sm space-y-1">
                                        <div class="flex items-center">
                                            <span class="text-gray-500 dark:text-gray-400 w-4 text-xs">A:</span>
                                            <span class="font-medium text-green-600 dark:text-green-400 ml-1">
                                                ${buyPrice ? buyPrice.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' ₺' : '-'}
                                            </span>
                                        </div>
                                        <div class="flex items-center">
                                            <span class="text-gray-500 dark:text-gray-400 w-4 text-xs">S:</span>
                                            <span class="font-medium text-red-600 dark:text-red-400 ml-1">
                                                ${sellPrice ? sellPrice.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' ₺' : '-'}
                                            </span>
                                        </div>
                                    </div>`
                                }
                            </td>
                            <td class="px-3 py-3 whitespace-nowrap">
                                ${product.isActive ? 
                                    '<span class="px-2 py-1 text-xs bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400 rounded-full">Aktif</span>' :
                                    '<span class="px-2 py-1 text-xs bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400 rounded-full">Pasif</span>'
                                }
                            </td>
                            <td class="px-3 py-3 whitespace-nowrap">
                                <div class="flex items-center space-x-2">
                                    <button onclick="editProduct('${product._id}')" class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 p-1" title="Düzenle">
                                        <i class="fas fa-edit text-sm"></i>
                                    </button>
                                    <button onclick="testProduct('${product._id}')" class="text-green-600 dark:text-green-400 hover:text-green-800 dark:hover:text-green-300 p-1" title="Test Et">
                                        <i class="fas fa-calculator text-sm"></i>
                                    </button>
                                    <button onclick="deleteProduct('${product._id}')" class="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 p-1" title="Sil">
                                        <i class="fas fa-trash text-sm"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
            `;
        });
        
        html += `
                        </tbody>
                    </table>
                </div>
            </div>
        `;
    }
    
    document.getElementById('productsContainer').innerHTML = html;
}

function initializeDragAndDrop() {
    const sortableRows = document.querySelectorAll('.sortable-row');
    
    sortableRows.forEach(row => {
        row.addEventListener('dragstart', function(e) {
            draggedRow = this;
            draggedSectionId = this.dataset.section;
            this.style.opacity = '0.4';
            e.dataTransfer.effectAllowed = 'move';
        });
        
        row.addEventListener('dragend', function(e) {
            this.style.opacity = '';
            draggedRow = null;
            draggedSectionId = null;
        });
        
        row.addEventListener('dragover', function(e) {
            if (draggedRow && this.dataset.section === draggedSectionId) {
                e.preventDefault();
                e.dataTransfer.dropEffect = 'move';
                this.classList.add('border-t-2', 'border-blue-500');
            }
        });
        
        row.addEventListener('dragleave', function(e) {
            this.classList.remove('border-t-2', 'border-blue-500');
        });
        
        row.addEventListener('drop', function(e) {
            e.preventDefault();
            this.classList.remove('border-t-2', 'border-blue-500');
            
            if (draggedRow && this !== draggedRow && this.dataset.section === draggedSectionId) {
                // Find the tbody that contains both rows
                const tbody = this.closest('tbody');
                const draggedIndex = Array.from(tbody.children).indexOf(draggedRow);
                const targetIndex = Array.from(tbody.children).indexOf(this);
                
                // Reorder in the DOM
                if (draggedIndex < targetIndex) {
                    tbody.insertBefore(draggedRow, this.nextSibling);
                } else {
                    tbody.insertBefore(draggedRow, this);
                }
                
                // Collect new order from the updated DOM
                const productIds = [];
                const reorderedRows = Array.from(tbody.querySelectorAll('.sortable-row'));
                reorderedRows.forEach(row => {
                    productIds.push(row.dataset.productId);
                });
                
                // Update order numbers in the UI
                reorderedRows.forEach((row, index) => {
                    const orderSpan = row.querySelector('.drag-handle span');
                    if (orderSpan) {
                        orderSpan.textContent = index + 1;
                    }
                });
                
                // Update server
                updateProductOrder(draggedSectionId, productIds);
            }
        });
    });
}

async function updateProductOrder(sectionId, productIds) {
    try {
        const response = await fetch('/konsol/api/products/reorder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                sectionId: sectionId,
                productIds: productIds
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            // Order numbers are already updated in the drag drop handler
            
            // Show success feedback
            showToast('Sıralama güncellendi', 'success');
        } else {
            alert('Sıralama güncellenemedi: ' + result.error);
            loadProductsWithPrices(); // Revert changes
        }
    } catch (error) {
        console.error('Update order error:', error);
        alert('Sıralama güncellenirken hata oluştu');
        loadProductsWithPrices(); // Revert changes
    }
}

function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `fixed top-4 right-4 px-4 py-2 rounded-lg text-white z-50 ${
        type === 'success' ? 'bg-green-600' : 
        type === 'error' ? 'bg-red-600' : 'bg-blue-600'
    }`;
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 3000);
}
</script>